{"version":3,"file":"commonHelpers.js","sources":["../src/js/helpers.ts","../src/js/blober.ts","../src/js/exportSVG.ts","../src/js/localStorageController.ts","../src/js/configBuilder.ts","../src/js/formHandler.ts","../src/main.ts"],"sourcesContent":["export type HexColor = `#${string}`;\n\nexport const generateHexColor = (): HexColor => {\n    return `#${Math.floor(Math.random()*16777215).toString(16)}`;\n}\n\nexport const getRandomInt = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const removeRandomFromArray = <T>(arr: T[]): T => {\n    const index = getRandomInt(0, arr.length - 1);\n    return arr.splice(index, 1)[0];\n};\n\nexport const getUniqueId = () => Date.now().toString(36) + Math.random().toString(36).slice(2);\n\nexport const generateTransform = () => `translate(${getRandomInt(-300, 300)}, ${getRandomInt(-300, 300)})`;\n","import generator from 'blobshape';\nimport { HexColor, generateHexColor } from './helpers';\n\nexport type BlobConfig = {\n  color: HexColor;\n  id: string;\n  transform: string;\n  filterId: string;\n  seed: number;\n};\n\nconst SVG_SIZE = 650;\n\nconst FILTER = `<defs>\n                   \n                </defs>`;\n\n// <filter id=\"filter\" x=\"-100\" y=\"-100\" width=\"750\" height=\"750\"\n// filterUnits=\"userSpaceOnUse\" col4or-interpolation-filters=\"sRGB\">\n//     <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\n//     <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n//     <feGaussianBlur stdDeviation=\"65.5\" result=\"effect1_foregroundBlur_32_5690\" />\n// </filter>\n\nconst DEFAULT_SCREEN = ` <circle\n                            cx=\"250\"\n                            cy=\"250\"\n                            r=\"200\"\n                            fill=\"none\"\n                            stroke=\"black\"\n                            stroke-width=\"2\"\n                        />\n                        <text\n                            x=\"50%\"\n                            y=\"50%\"\n                            text-anchor=\"middle\"\n                            font-size=\"30\"\n                            fill=\"black\"\n                        >\n                            Hello, Blob!\n                        </text>`;\n\nconst getPathString = (cfg: BlobConfig) => {\n  const path = generator({\n    size: SVG_SIZE,\n    growth: 1,\n    seed: cfg.seed.toString(),\n  }).path;\n  const animationPaths = [\n    generator({\n      size: SVG_SIZE,\n      growth: 1.5,\n      seed: (cfg.seed + 1).toString(),\n    }).path,\n    generator({\n      size: SVG_SIZE,\n      growth: 2,\n      seed: (cfg.seed + 2).toString(),\n    }).path,\n  ];\n  return `<g transform=\"${cfg.transform}\" filter=\"url(#${cfg.filterId})\">\n                <path d=\"${path}\" fill=\"${cfg.color}\" >\n                    <animate \n                        attributeName=\"d\" \n                        dur=\"10s\" \n                        repeatCount=\"indefinite\" \n                        keyTimes=\"0;0.33;0.67;1\" \n                        values=\"${path};${animationPaths.join(';')};${path}\" \n                    />\n                </path>\n            </g>`;\n};\n\nconst generateBlob = (config: BlobConfig, svg: HTMLElement) => {\n  if (!config.color) {\n    config.color = generateHexColor();\n  }\n\n  const blob = getPathString(config);\n\n  svg.insertAdjacentHTML('afterbegin', blob);\n};\n\nexport const generateBlobs = (blobConfigs: BlobConfig[]) => {\n  const svg = document.querySelector('.screen') as HTMLElement;\n  if (!blobConfigs.length) {\n    svg.innerHTML = DEFAULT_SCREEN;\n    return;\n  }\n  svg.innerHTML = '';\n  svg.insertAdjacentHTML('beforeend', FILTER);\n\n  blobConfigs.forEach((config) => {\n    generateBlob(config, svg);\n  });\n};\n","import svg64 from \"svg64\";\n\nexport const handleExportSVG = () => {\n    const svg = document.querySelector(\".screen\") as SVGSVGElement;\n    const loadSVGButton = document.querySelector(\"#load-svg\") as HTMLButtonElement;\n    const copyAsTextButton = document.querySelector(\"#copy-svg\") as HTMLButtonElement;\n    const copyAsBase64Button = document.querySelector(\"#copy-svg-as-base64\") as HTMLButtonElement;\n    \n    copyAsBase64Button.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        const base64 = svg64(svgString);\n        navigator.clipboard.writeText(base64);\n    });\n\n    copyAsTextButton.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        navigator.clipboard.writeText(svgString);\n    });\n    \n    loadSVGButton.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        const blob = new Blob([svgString], { type: \"image/svg+xml\" });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"blobs.svg\";\n        a.click();\n        URL.revokeObjectURL(url);\n    });\n};\n","import { BlobConfig } from './blober';\n\nclass LocalStorageController<T> {\n  protected storage = localStorage;\n\n  protected entities: Set<T> = new Set();\n\n  protected metakey: string;\n\n  constructor(metakey: string) {\n    this.metakey = metakey;\n    const current = JSON.parse(this.storage.getItem(this.metakey) || '[]');\n    this.entities = new Set(current);\n  }\n\n  protected save() {\n    this.storage.setItem(\n      this.metakey,\n      JSON.stringify(Array.from(this.entities))\n    );\n    document.dispatchEvent(new Event('update'));\n  }\n\n  clear() {\n    this.entities.clear();\n    this.storage.removeItem(this.metakey);\n    document.dispatchEvent(new Event(\"update\"));\n  }\n\n  addEntity(key: T) {\n    this.entities.add(key);\n    this.save();\n  }\n\n  removeEntity(key: T) {\n    this.entities.delete(key);\n    this.save();\n  }\n\n  has(id: string) {\n    return Array.from(this.entities).some((entity: any) => entity.id === id);\n  }\n\n  getEntities() {\n    return Array.from(this.entities);\n  }\n\n  getEntitiesCount() {\n    return this.entities.size;\n  }\n\n  findEntity(predicate: (value: T, value2: number, set: Array<T>) => unknown) {\n    return Array.from(this.entities).find(predicate);\n  }\n\n  updateEntity(key: T, value: T) {\n    if (this.entities.has(key)) {\n      this.entities.delete(key);\n      this.entities.add(value);\n      this.save();\n    }\n  }\n}\n\nexport const blobStorage = new LocalStorageController<BlobConfig>(\n  '__blobConfigs__'\n);\n","import generator from 'blobshape';\n\nimport { BlobConfig } from './blober';\nimport { generateHexColor, generateTransform, getUniqueId } from './helpers';\n\nexport const generateNewBlobConfig = (): BlobConfig => {\n    const seed  = Math.floor(Math.random() * 1000_000_000);\n  return {\n    id: getUniqueId(),\n    transform: generateTransform(),\n    filterId: 'filter',\n    color: generateHexColor(),\n    seed,\n  };\n};\n\n","import { BlobConfig } from './blober';\nimport { blobStorage } from './localStorageController';\nimport { generateNewBlobConfig } from './configBuilder';\n\nconst removeBlob = (id: string) => {\n  const blob = blobStorage.findEntity((blob: BlobConfig) => blob.id === id);\n  if (!blob) {\n    return;\n  }\n  blobStorage.removeEntity(blob);\n};\n\nconst getFieldset = ({ id, color, seed }: BlobConfig) => {\n  const fieldset = document.createElement('fieldset');\n  fieldset.classList.add('blob-fieldset');\n  fieldset.innerHTML = `\n      <label>\n          <span>Color:</span>\n          <input value=\"${color}\" type=\"color\" name=\"color_${id}\" id=\"color_${id}\" />\n      </label>\n      <label>\n        <span>Seed:</span>\n        <input value=\"${seed}\" type=\"text\" name=\"seed_${id}\" id=\"seed_${id}\" />\n      </label>\n      <button type=\"button\" class=\"remove-blob\">Remove</button>\n  `;\n  const removeButton = fieldset.querySelector(\n    '.remove-blob'\n  ) as HTMLButtonElement;\n  removeButton.addEventListener('click', () => removeBlob(id));\n  return fieldset;\n};\n\nexport const formHandler = (form: HTMLFormElement) => {\n  const addBlobButton = form.querySelector('#add-blob') as HTMLButtonElement;\n\n  const updateView = (e?: Event) => {\n    e?.preventDefault();\n    const blobs = blobStorage.getEntities();\n    form.querySelectorAll('.blob-fieldset').forEach((el) => el.remove());\n    blobs.forEach((blob) => {\n      form.insertAdjacentElement('beforeend', getFieldset(blob));\n    });\n  };\n\n  addBlobButton.addEventListener('click', () => {\n    const newBlobConfig: BlobConfig = generateNewBlobConfig();\n    blobStorage.addEntity(newBlobConfig);\n  });\n\n  form.addEventListener('reset', (e) => {\n    e.preventDefault();\n    blobStorage.clear();\n    form.querySelectorAll('.blob-fieldset').forEach((el) => el.remove());\n  });\n  document.addEventListener('update', updateView);\n  updateView();\n};\n","import { generateBlobs } from \"./js/blober.js\";\nimport { handleExportSVG } from \"./js/exportSVG.js\";\nimport { formHandler } from \"./js/formHandler.js\";\nimport { blobStorage } from \"./js/localStorageController.js\";\n\nconst form = document.querySelector(\".controls__form\") as HTMLFormElement;\nhandleExportSVG();\n\nformHandler(form);\n\ndocument.addEventListener(\"update\", () => {\n    generateBlobs(blobStorage.getEntities());\n});\ngenerateBlobs(blobStorage.getEntities());\n"],"names":["generateHexColor","getRandomInt","min","max","getUniqueId","generateTransform","SVG_SIZE","FILTER","DEFAULT_SCREEN","getPathString","cfg","path","generator","animationPaths","generateBlob","config","svg","blob","generateBlobs","blobConfigs","handleExportSVG","loadSVGButton","copyAsTextButton","svgString","base64","svg64","url","a","LocalStorageController","metakey","current","key","id","entity","predicate","value","blobStorage","generateNewBlobConfig","seed","removeBlob","getFieldset","color","fieldset","formHandler","form","addBlobButton","updateView","e","blobs","el","newBlobConfig"],"mappings":"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"}