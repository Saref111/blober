{"version":3,"file":"commonHelpers.js","sources":["../src/js/exportSVG.ts","../src/js/localStorageController.ts","../src/js/helpers.ts","../src/js/configBuilder.ts","../src/js/formHandler.ts","../src/main.ts"],"sourcesContent":["import svg64 from \"svg64\";\n\nexport const handleExportSVG = () => {\n    const svg = document.querySelector(\".screen\") as SVGSVGElement;\n    const loadSVGButton = document.querySelector(\"#load-svg\") as HTMLButtonElement;\n    const copyAsTextButton = document.querySelector(\"#copy-svg\") as HTMLButtonElement;\n    const copyAsBase64Button = document.querySelector(\"#copy-svg-as-base64\") as HTMLButtonElement;\n    \n    copyAsBase64Button.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        const base64 = svg64(svgString);\n        navigator.clipboard.writeText(base64);\n    });\n\n    copyAsTextButton.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        navigator.clipboard.writeText(svgString);\n    });\n    \n    loadSVGButton.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        const blob = new Blob([svgString], { type: \"image/svg+xml\" });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"blobs.svg\";\n        a.click();\n        URL.revokeObjectURL(url);\n    });\n};\n","import { BlobConfig } from \"./blober\";\n\nclass LocalStorageController<T> {\n    protected storage = localStorage;\n\n    protected entities: Set<T> = new Set();\n\n    protected metakey: string;\n\n    constructor(metakey: string) {\n        this.metakey = metakey;\n        const current = JSON.parse(this.storage.getItem(this.metakey) || \"[]\");\n        this.entities = new Set(current);\n    }\n    \n    protected save() {\n        this.storage.setItem(this.metakey, JSON.stringify(Array.from(this.entities)));\n        document.dispatchEvent(new Event(\"update\"));\n    }\n\n    clear() {\n        this.entities.clear();\n        this.storage.removeItem(this.metakey);\n    }\n\n    addEntity(key: T) {\n        this.entities.add(key);\n        this.save();\n    }\n\n    removeEntity(key: T) {\n        this.entities.delete(key);\n        this.save();\n    }\n\n    has(id: string) {\n        return Array.from(this.entities).some((entity: any) => entity.id === id);\n    }\n\n    getEntities() {\n        return Array.from(this.entities);\n    }\n\n    getEntitiesCount() {\n        return this.entities.size;\n    }\n\n    findEntity(predicate: (value: T, value2: number, set: Array<T>) => unknown) {\n        return Array.from(this.entities).find(predicate);\n    }\n\n    updateEntity(key: T, value: T) {\n        if (this.entities.has(key)) {\n            this.entities.delete(key);\n            this.entities.add(value);\n            this.save();\n        }\n    }\n}\n\nexport const blobStorage =  new LocalStorageController<BlobConfig>(\"__blobConfigs__\");\n","export type HexColor = `#${string}`;\n\nexport const generateHexColor = (): HexColor => {\n    return `#${Math.floor(Math.random()*16777215).toString(16)}`;\n}\n\nexport const getRandomInt = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const removeRandomFromArray = <T>(arr: T[]): T => {\n    const index = getRandomInt(0, arr.length - 1);\n    return arr.splice(index, 1)[0];\n};\n\nexport const getUniqueId = () => Date.now().toString(36) + Math.random().toString(36).slice(2);\n\nexport const generateTransform = () => `translate(${getRandomInt(-300, 300)}, ${getRandomInt(-300, 300)})`;\n","import generator from 'blobshape';\n\nimport { BlobConfig } from './blober';\nimport { generateHexColor, generateTransform, getUniqueId } from './helpers';\n\nconst SVG_SIZE = 650;\n\nexport const generateNewBlobConfig = (): BlobConfig => {\n    const seed  = Math.floor(Math.random() * 1000_000_000);\n  return {\n    id: getUniqueId(),\n    path: generator({\n      size: SVG_SIZE,\n      growth: 1,\n    }).path,\n    transform: generateTransform(),\n    filterId: 'filter',\n    color: generateHexColor(),\n    seed,\n    animationPaths: [\n      generator({\n        size: SVG_SIZE,\n        growth: 1.5,\n        seed: (seed + 1).toString(),\n      }).path,\n      generator({\n        size: SVG_SIZE,\n        growth: 2,\n        seed: (seed + 2).toString(),\n      }).path,\n    ],\n  };\n};\n\n","import { BlobConfig } from './blober';\nimport { blobStorage } from './localStorageController';\nimport { generateNewBlobConfig } from './configBuilder';\n\nconst removeBlob = (id: string) => {\n  const blob = blobStorage.findEntity((blob: BlobConfig) => blob.id === id);\n  if (!blob) {\n    return;\n  }\n  blobStorage.removeEntity(blob);\n};\n\nconst getFieldset = ({ id, color, seed }: BlobConfig) => {\n  const fieldset = document.createElement('fieldset');\n  fieldset.classList.add('blob-fieldset');\n  fieldset.innerHTML = `\n      <label>\n          <span>Color:</span>\n          <input value=\"${color}\" type=\"color\" name=\"color_${id}\" id=\"color_${id}\" />\n      </label>\n      <label>\n        <span>Seed:</span>\n        <input value=\"${seed}\" type=\"text\" name=\"seed_${id}\" id=\"seed_${id}\" />\n      </label>\n      <button type=\"button\" class=\"remove-blob\">Remove</button>\n  `;\n  const removeButton = fieldset.querySelector(\n    '.remove-blob'\n  ) as HTMLButtonElement;\n  removeButton.addEventListener('click', () => removeBlob(id));\n  return fieldset;\n};\n\nexport const formHandler = (form: HTMLFormElement) => {\n  const addBlobButton = form.querySelector('#add-blob') as HTMLButtonElement;\n\n  const updateView = (e?: Event) => {\n    e?.preventDefault();\n    const blobs = blobStorage.getEntities();\n    form.querySelectorAll('.blob-fieldset').forEach(el => el.remove());\n    blobs.forEach(blob => {\n      form.insertAdjacentElement('beforeend', getFieldset(blob));\n    });\n  };\n\n  addBlobButton.addEventListener('click', () => {\n    const newBlobConfig: BlobConfig = generateNewBlobConfig();\n    blobStorage.addEntity(newBlobConfig);\n  });\n\n  form.addEventListener('reset', e => {\n    e.preventDefault();\n    blobStorage.clear();\n    form.querySelectorAll('.blob-fieldset').forEach(el => el.remove());\n  });\n  document.addEventListener('update', updateView);\n  updateView();\n};\n","import { generateBlobs } from \"./js/blober.js\";\nimport { handleExportSVG } from \"./js/exportSVG.js\";\nimport { formHandler } from \"./js/formHandler.js\";\n\nconst form = document.querySelector(\".controls__form\") as HTMLFormElement;\nhandleExportSVG();\n\nformHandler(form);\n"],"names":["handleExportSVG","svg","loadSVGButton","copyAsTextButton","svgString","base64","svg64","blob","url","a","LocalStorageController","metakey","current","key","id","entity","predicate","value","blobStorage","generateHexColor","getRandomInt","min","max","getUniqueId","generateTransform","SVG_SIZE","generateNewBlobConfig","seed","generator","removeBlob","getFieldset","color","fieldset","formHandler","form","addBlobButton","updateView","e","blobs","el","newBlobConfig"],"mappings":"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"}