{"version":3,"file":"commonHelpers.js","sources":["../src/js/helpers.ts","../src/js/blober.ts","../src/js/exportSVG.ts","../src/js/configBuilder.ts","../src/js/formHandler.ts","../src/main.ts"],"sourcesContent":["export type HexColor = `#${string}`;\n\nexport const generateHexColor = (): HexColor => {\n    return `#${Math.floor(Math.random()*16777215).toString(16)}`;\n}\n\nexport const getRandomInt = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const removeRandomFromArray = <T>(arr: T[]): T => {\n    const index = getRandomInt(0, arr.length - 1);\n    return arr.splice(index, 1)[0];\n};\n\nexport const getUniqueId = () => Date.now().toString(36) + Math.random().toString(36).slice(2);\n","import generator from \"blobshape\";\nimport { HexColor, generateHexColor, getRandomInt, removeRandomFromArray } from \"./helpers\";\n\nexport type BlobConfig = {\n    color?: HexColor;\n    id: string;\n};\n\nconst SVG_SIZE = 400;\nconst FILTER = `<defs>\n                    <filter id=\"filter\" x=\"-100\" y=\"-100\" width=\"750\" height=\"750\"\n                    filterUnits=\"userSpaceOnUse\" col4or-interpolation-filters=\"sRGB\">\n                        <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\n                        <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n                        <feGaussianBlur stdDeviation=\"65.5\" result=\"effect1_foregroundBlur_32_5690\" />\n                    </filter>\n                </defs>`;\n\n                \nconst generateTransform = () => `translate(${getRandomInt(-300, 300)}, ${getRandomInt(-300, 300)})`;\n\nconst getPathString = (color: HexColor) => {\n    const { path } = generator({\n        size: SVG_SIZE,\n        growth: 1,\n    });\n\n    return `<g transform=\"${generateTransform()}\" filter=\"url(#filter)\">\n                <path d=\"${path}\" fill=\"${color}\" >\n                    <animate \n                        attributeName=\"d\" \n                        dur=\"10s\" \n                        repeatCount=\"indefinite\" \n                        keyTimes=\"0;0.33;0.67;1\" \n                        values=\"${path};${generator({ size: SVG_SIZE, growth: 1.5 }).path};${generator({ size: SVG_SIZE, growth: 1.5 }).path};${path}\" \n                    />\n                </path>\n            </g>`;\n        };\n\nconst generateBlob = (config: BlobConfig, svg: HTMLElement) => {\n    if (!config.color) {\n        config.color = generateHexColor();\n    }\n\n    const purpleBlobString = getPathString(config.color);\n\n    svg.insertAdjacentHTML('afterbegin', purpleBlobString);\n}\n\nexport const generateBlobs = (blobConfigs: BlobConfig[]) => {\n    const svg = document.querySelector(\".screen\") as HTMLElement;\n    svg.innerHTML = \"\";\n    svg.insertAdjacentHTML('beforeend', FILTER);\n\n    blobConfigs.forEach((config) => {\n        generateBlob(config, svg);\n    });\n    \n};\n","import svg64 from \"svg64\";\n\nexport const handleExportSVG = () => {\n    const svg = document.querySelector(\".screen\") as SVGSVGElement;\n    const loadSVGButton = document.querySelector(\"#load-svg\") as HTMLButtonElement;\n    const copyAsTextButton = document.querySelector(\"#copy-svg\") as HTMLButtonElement;\n    const copyAsBase64Button = document.querySelector(\"#copy-svg-as-base64\") as HTMLButtonElement;\n    \n    copyAsBase64Button.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        const base64 = svg64(svgString);\n        navigator.clipboard.writeText(base64);\n    });\n\n    copyAsTextButton.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        navigator.clipboard.writeText(svgString);\n    });\n    \n    loadSVGButton.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        const blob = new Blob([svgString], { type: \"image/svg+xml\" });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"blobs.svg\";\n        a.click();\n        URL.revokeObjectURL(url);\n    });\n};\n","import { BlobConfig } from \"./blober\";\nimport { getUniqueId } from \"./helpers\";\n\nexport const buildConfig = (formElement: HTMLFormElement) => {\n    const formData = new FormData(formElement);\n    const configsArray: any = [];\n    \n    for (const [rawKey, value] of formData.entries()) {\n        const [key, index] = rawKey.split(\"_\");\n        if (!configsArray[index]) {\n            configsArray[index] = {\n                id: getUniqueId(),\n            };\n        } \n        configsArray[index][key as string] = value;\n    }\n    \n    return configsArray as BlobConfig[];\n};\n","import { BlobConfig } from \"./blober\";\nimport { buildConfig } from \"./configBuilder\";\nimport { generateHexColor } from \"./helpers\";\n\nconst getFieldset = (id: number) => {\n    return `\n        <fieldset class=\"blob-fieldset\">\n            <label>\n                <span>Color:</span>\n                <input value=\"${generateHexColor()}\" type=\"color\" name=\"color_${id}\" id=\"color_${id}\" />\n            </label>\n        </fieldset>`;\n};\n\nexport const formHandler = (form: HTMLFormElement, generateBlobs: (c: BlobConfig[]) => void) => {\n    const addBlobButton = form.querySelector(\"#add-blob\") as HTMLButtonElement;\n\n    addBlobButton.addEventListener(\"click\", () => {\n        const newFieldsetId = form.querySelectorAll(\".blob-fieldset\").length;\n        form.insertAdjacentHTML(\"beforeend\", getFieldset(newFieldsetId));\n    });\n\n    form.addEventListener(\"reset\", (e) => {\n        e.preventDefault();\n        form.querySelectorAll(\".blob-fieldset\").forEach((el) => el.remove());\n        form.insertAdjacentHTML(\"beforeend\", getFieldset(0));\n    });\n\n    form.addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n        const configsArray = buildConfig(form);\n        generateBlobs(configsArray);\n    });\n\n    form.insertAdjacentHTML(\"beforeend\", getFieldset(0));\n\n}\n","import { generateBlobs } from \"./js/blober.js\";\nimport { handleExportSVG } from \"./js/exportSVG.js\";\nimport { formHandler } from \"./js/formHandler.js\";\n\n\nconst form = document.querySelector(\".controls__form\") as HTMLFormElement;\nhandleExportSVG();\n\nformHandler(form, generateBlobs);\n"],"names":["generateHexColor","getRandomInt","min","max","getUniqueId","SVG_SIZE","FILTER","generateTransform","getPathString","color","path","generator","generateBlob","config","svg","purpleBlobString","generateBlobs","blobConfigs","handleExportSVG","loadSVGButton","copyAsTextButton","svgString","base64","svg64","blob","url","a","buildConfig","formElement","formData","configsArray","rawKey","value","key","index","getFieldset","id","formHandler","form","newFieldsetId","e","el"],"mappings":"6vBAEO,MAAMA,EAAmB,IACrB,IAAI,KAAK,MAAM,KAAK,SAAS,QAAQ,EAAE,SAAS,EAAE,IAGhDC,EAAe,CAACC,EAAaC,IAAgB,KAAK,MAAM,KAAK,OAAA,GAAYA,EAAMD,EAAM,EAAE,EAAIA,EAO3FE,EAAc,IAAM,KAAK,IAAA,EAAM,SAAS,EAAE,EAAI,KAAK,OAAS,EAAA,SAAS,EAAE,EAAE,MAAM,CAAC,ECLvFC,EAAW,IACXC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAUTC,EAAoB,IAAM,aAAaN,EAAa,KAAM,GAAG,MAAMA,EAAa,KAAM,GAAG,KAEzFO,EAAiBC,GAAoB,CACjC,KAAA,CAAE,KAAAC,CAAK,EAAIC,EAAU,CACvB,KAAMN,EACN,OAAQ,CAAA,CACX,EAED,MAAO,iBAAiBE;2BACDG,YAAeD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAMRC,KAAQC,EAAU,CAAE,KAAMN,EAAU,OAAQ,GAAK,CAAA,EAAE,QAAQM,EAAU,CAAE,KAAMN,EAAU,OAAQ,GAAI,CAAC,EAAE,QAAQK;AAAA;AAAA;AAAA,iBAIxI,EAEFE,EAAe,CAACC,EAAoBC,IAAqB,CACtDD,EAAO,QACRA,EAAO,MAAQb,KAGb,MAAAe,EAAmBP,EAAcK,EAAO,KAAK,EAE/CC,EAAA,mBAAmB,aAAcC,CAAgB,CACzD,EAEaC,EAAiBC,GAA8B,CAClD,MAAAH,EAAM,SAAS,cAAc,SAAS,EAC5CA,EAAI,UAAY,GACZA,EAAA,mBAAmB,YAAaR,CAAM,EAE9BW,EAAA,QAASJ,GAAW,CAC5BD,EAAaC,EAAQC,CAAG,CAAA,CAC3B,CAEL,ECzDaI,EAAkB,IAAM,CAC3B,MAAAJ,EAAM,SAAS,cAAc,SAAS,EACtCK,EAAgB,SAAS,cAAc,WAAW,EAClDC,EAAmB,SAAS,cAAc,WAAW,EAChC,SAAS,cAAc,qBAAqB,EAEpD,iBAAiB,QAAS,IAAM,CAC/C,MAAMC,EAAY,IAAI,cAAc,EAAE,kBAAkBP,CAAG,EACrDQ,EAASC,EAAMF,CAAS,EACpB,UAAA,UAAU,UAAUC,CAAM,CAAA,CACvC,EAEgBF,EAAA,iBAAiB,QAAS,IAAM,CAC7C,MAAMC,EAAY,IAAI,cAAc,EAAE,kBAAkBP,CAAG,EACjD,UAAA,UAAU,UAAUO,CAAS,CAAA,CAC1C,EAEaF,EAAA,iBAAiB,QAAS,IAAM,CAC1C,MAAME,EAAY,IAAI,cAAc,EAAE,kBAAkBP,CAAG,EACrDU,EAAO,IAAI,KAAK,CAACH,CAAS,EAAG,CAAE,KAAM,eAAA,CAAiB,EACtDI,EAAM,IAAI,gBAAgBD,CAAI,EAC9BE,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,KAAOD,EACTC,EAAE,SAAW,YACbA,EAAE,MAAM,EACR,IAAI,gBAAgBD,CAAG,CAAA,CAC1B,CACL,EC1BaE,EAAeC,GAAiC,CACnD,MAAAC,EAAW,IAAI,SAASD,CAAW,EACnCE,EAAoB,CAAA,EAE1B,SAAW,CAACC,EAAQC,CAAK,IAAKH,EAAS,UAAW,CAC9C,KAAM,CAACI,EAAKC,CAAK,EAAIH,EAAO,MAAM,GAAG,EAChCD,EAAaI,KACdJ,EAAaI,GAAS,CAClB,GAAI9B,EAAY,CAAA,GAGxB0B,EAAaI,GAAOD,GAAiBD,CACzC,CAEO,OAAAF,CACX,ECdMK,EAAeC,GACV;AAAA;AAAA;AAAA;AAAA,gCAIqBpC,EAAA,+BAAgDoC,gBAAiBA;AAAA;AAAA,qBAKpFC,EAAc,CAACC,EAAuBtB,IAA6C,CACtEsB,EAAK,cAAc,WAAW,EAEtC,iBAAiB,QAAS,IAAM,CAC1C,MAAMC,EAAgBD,EAAK,iBAAiB,gBAAgB,EAAE,OAC9DA,EAAK,mBAAmB,YAAaH,EAAYI,CAAa,CAAC,CAAA,CAClE,EAEID,EAAA,iBAAiB,QAAUE,GAAM,CAClCA,EAAE,eAAe,EACZF,EAAA,iBAAiB,gBAAgB,EAAE,QAASG,GAAOA,EAAG,QAAQ,EACnEH,EAAK,mBAAmB,YAAaH,EAAY,CAAC,CAAC,CAAA,CACtD,EAEIG,EAAA,iBAAiB,SAAWE,GAAM,CACnCA,EAAE,eAAe,EACX,MAAAV,EAAeH,EAAYW,CAAI,EACrCtB,EAAcc,CAAY,CAAA,CAC7B,EAEDQ,EAAK,mBAAmB,YAAaH,EAAY,CAAC,CAAC,CAEvD,EC/BMG,EAAO,SAAS,cAAc,iBAAiB,EACrDpB,IAEAmB,EAAYC,EAAMtB,CAAa"}