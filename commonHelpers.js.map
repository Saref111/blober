{"version":3,"file":"commonHelpers.js","sources":["../src/js/helpers.ts","../src/js/blober.ts","../src/js/configBuilder.ts","../src/js/formHandler.ts","../src/main.ts"],"sourcesContent":["export type HexColor = `#${string}`;\n\nexport const generateHexColor = (): HexColor => {\n    return `#${Math.floor(Math.random()*16777215).toString(16)}`;\n}\n\nexport const getRandomInt = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const removeRandomFromArray = <T>(arr: T[]): T => {\n    const index = getRandomInt(0, arr.length - 1);\n    return arr.splice(index, 1)[0];\n};\n","import generator from \"blobshape\";\nimport { HexColor, generateHexColor, getRandomInt, removeRandomFromArray } from \"./helpers\";\n\nexport type BlobConfig = {\n    color?: HexColor;\n};\n\nconst SVG_SIZE = 400;\nconst FILTER = `<defs>\n                    <filter id=\"filter\" x=\"-100\" y=\"-100\" width=\"750\" height=\"750\"\n                    filterUnits=\"userSpaceOnUse\" col4or-interpolation-filters=\"sRGB\">\n                        <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\n                        <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n                        <feGaussianBlur stdDeviation=\"65.5\" result=\"effect1_foregroundBlur_32_5690\" />\n                    </filter>\n                </defs>`;\n\n                \nconst generateTransform = () => `translate(${getRandomInt(-300, 300)}, ${getRandomInt(-300, 300)})`;\n\nconst getPathString = (color: HexColor) => {\n    const { path } = generator({\n        size: SVG_SIZE,\n        growth: 1,\n    });\n\n    return `<g transform=\"${generateTransform()}\" filter=\"url(#filter)\">\n                <path d=\"${path}\" fill=\"${color}\" >\n                    <animate \n                        attributeName=\"d\" \n                        dur=\"10s\" \n                        repeatCount=\"indefinite\" \n                        keyTimes=\"0;0.33;0.67;1\" \n                        values=\"${path};${generator({ size: SVG_SIZE, growth: 1.5 }).path};${generator({ size: SVG_SIZE, growth: 1.5 }).path};${path}\" \n                    />\n                </path>\n            </g>`;\n        };\n\nconst generateBlob = (config: BlobConfig = {}, svg: HTMLElement) => {\n    if (!config.color) {\n        config.color = generateHexColor();\n    }\n\n    const purpleBlobString = getPathString(config.color);\n\n    svg.insertAdjacentHTML('afterbegin', purpleBlobString);\n}\n\nexport const generateBlobs = (blobConfigs: BlobConfig[]) => {\n    const svg = document.querySelector(\".screen\") as HTMLElement;\n    svg.innerHTML = \"\";\n    // svg.insertAdjacentHTML('beforeend', FILTER);\n\n    blobConfigs.forEach((config) => {\n        generateBlob(config, svg);\n    });\n    \n};\n","import { BlobConfig } from \"./blober\";\n\nexport const buildConfig = (formElement: HTMLFormElement) => {\n    const formData = new FormData(formElement);\n    const configsArray: any = [];\n    \n    for (const [rawKey, value] of formData.entries()) {\n        const [key, index] = rawKey.split(\"_\");\n        if (!configsArray[index]) {\n            configsArray[index] = {};\n        } \n        configsArray[index][key as string] = value;\n    }\n    \n    return configsArray as BlobConfig[];\n};\n","import { BlobConfig } from \"./blober\";\nimport { buildConfig } from \"./configBuilder\";\nimport { generateHexColor } from \"./helpers\";\n\nconst getFieldset = (id: number) => {\n    return `\n        <fieldset class=\"blob-fieldset\">\n            <label>\n                <span>Color:</span>\n                <input value=\"${generateHexColor()}\" type=\"color\" name=\"color_${id}\" id=\"color_${id}\" />\n            </label>\n        </fieldset>`;\n};\n\nexport const formHandler = (form: HTMLFormElement, generateBlobs: (c: BlobConfig[]) => void) => {\n    const addBlobButton = form.querySelector(\"#add-blob\") as HTMLButtonElement;\n\n    addBlobButton.addEventListener(\"click\", () => {\n        const newFieldsetId = form.querySelectorAll(\".blob-fieldset\").length;\n        form.insertAdjacentHTML(\"beforeend\", getFieldset(newFieldsetId));\n    });\n\n    form.addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n        const configsArray = buildConfig(form);\n        generateBlobs(configsArray);\n    });\n\n    form.insertAdjacentHTML(\"beforeend\", getFieldset(0));\n\n}\n","import { generateBlobs } from \"./js/blober.js\";\nimport { formHandler } from \"./js/formHandler.js\";\n\n\nconst form = document.querySelector(\".controls__form\") as HTMLFormElement;\nformHandler(form, generateBlobs);\n"],"names":["generateHexColor","getRandomInt","min","max","SVG_SIZE","generateTransform","getPathString","color","path","generator","generateBlob","config","svg","purpleBlobString","generateBlobs","blobConfigs","buildConfig","formElement","formData","configsArray","rawKey","value","key","index","getFieldset","id","formHandler","form","newFieldsetId","e"],"mappings":"svBAEO,MAAMA,EAAmB,IACrB,IAAI,KAAK,MAAM,KAAK,SAAS,QAAQ,EAAE,SAAS,EAAE,IAGhDC,EAAe,CAACC,EAAaC,IAAgB,KAAK,MAAM,KAAK,OAAA,GAAYA,EAAMD,EAAM,EAAE,EAAIA,ECClGE,EAAW,IAWXC,EAAoB,IAAM,aAAaJ,EAAa,KAAM,GAAG,MAAMA,EAAa,KAAM,GAAG,KAEzFK,EAAiBC,GAAoB,CACjC,KAAA,CAAE,KAAAC,CAAK,EAAIC,EAAU,CACvB,KAAML,EACN,OAAQ,CAAA,CACX,EAED,MAAO,iBAAiBC;2BACDG,YAAeD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAMRC,KAAQC,EAAU,CAAE,KAAML,EAAU,OAAQ,GAAK,CAAA,EAAE,QAAQK,EAAU,CAAE,KAAML,EAAU,OAAQ,GAAI,CAAC,EAAE,QAAQI;AAAA;AAAA;AAAA,iBAIxI,EAEFE,EAAe,CAACC,EAAqB,GAAIC,IAAqB,CAC3DD,EAAO,QACRA,EAAO,MAAQX,KAGb,MAAAa,EAAmBP,EAAcK,EAAO,KAAK,EAE/CC,EAAA,mBAAmB,aAAcC,CAAgB,CACzD,EAEaC,EAAiBC,GAA8B,CAClD,MAAAH,EAAM,SAAS,cAAc,SAAS,EAC5CA,EAAI,UAAY,GAGJG,EAAA,QAASJ,GAAW,CAC5BD,EAAaC,EAAQC,CAAG,CAAA,CAC3B,CAEL,ECxDaI,EAAeC,GAAiC,CACnD,MAAAC,EAAW,IAAI,SAASD,CAAW,EACnCE,EAAoB,CAAA,EAE1B,SAAW,CAACC,EAAQC,CAAK,IAAKH,EAAS,UAAW,CAC9C,KAAM,CAACI,EAAKC,CAAK,EAAIH,EAAO,MAAM,GAAG,EAChCD,EAAaI,KACdJ,EAAaI,GAAS,IAE1BJ,EAAaI,GAAOD,GAAiBD,CACzC,CAEO,OAAAF,CACX,ECXMK,EAAeC,GACV;AAAA;AAAA;AAAA;AAAA,gCAIqBzB,EAAA,+BAAgDyB,gBAAiBA;AAAA;AAAA,qBAKpFC,EAAc,CAACC,EAAuBb,IAA6C,CACtEa,EAAK,cAAc,WAAW,EAEtC,iBAAiB,QAAS,IAAM,CAC1C,MAAMC,EAAgBD,EAAK,iBAAiB,gBAAgB,EAAE,OAC9DA,EAAK,mBAAmB,YAAaH,EAAYI,CAAa,CAAC,CAAA,CAClE,EAEID,EAAA,iBAAiB,SAAWE,GAAM,CACnCA,EAAE,eAAe,EACX,MAAAV,EAAeH,EAAYW,CAAI,EACrCb,EAAcK,CAAY,CAAA,CAC7B,EAEDQ,EAAK,mBAAmB,YAAaH,EAAY,CAAC,CAAC,CAEvD,EC1BMG,EAAO,SAAS,cAAc,iBAAiB,EACrDD,EAAYC,EAAMb,CAAa"}