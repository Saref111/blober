{"version":3,"file":"commonHelpers.js","sources":["../src/js/helpers.ts","../src/js/constants.ts","../src/js/localStorageController.ts","../src/js/blober.ts","../src/js/exportSVG.ts","../src/js/configBuilder.ts","../src/js/controls/filedsetHandlers.ts","../src/js/controls/formHandler.ts","../src/main.ts"],"sourcesContent":["import { TransformationType } from \"./blober\";\n\nexport const generateHexColor = (): string => {\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n        let component = Math.floor(Math.random() * 256).toString(16);\n        color += component.padStart(2, '0');\n    }\n    return color;\n}\n\nexport const getRandomInt = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const removeRandomFromArray = <T>(arr: T[]): T => {\n    const index = getRandomInt(0, arr.length - 1);\n    return arr.splice(index, 1)[0];\n};\n\nexport const getUniqueId = () => Date.now().toString(36) + Math.random().toString(36).slice(2);\n\nexport const generateTransformType = (): TransformationType => \"translate\";\n","export const SVG_SIZE = 650;\n\nexport const FILTER = `<defs>\n                    <filter id=\"filter\" x=\"-100\" y=\"-100\" width=\"1750\" height=\"1750\"\n                        filterUnits=\"userSpaceOnUse\" col4or-interpolation-filters=\"sRGB\">\n                        <feGaussianBlur stdDeviation=\"65.5\" result=\"effect1_foregroundBlur_32_5690\" />\n                    </filter>                   \n                </defs>`;\n\n\n\nexport const DEFAULT_SCREEN = ` <circle\n                            cx=\"250\"\n                            cy=\"250\"\n                            r=\"200\"\n                            fill=\"none\"\n                            stroke=\"black\"\n                            stroke-width=\"2\"\n                        />\n                        <text\n                            x=\"50%\"\n                            y=\"50%\"\n                            text-anchor=\"middle\"\n                            font-size=\"30\"\n                            fill=\"black\"\n                        >\n                            Hello, Blob!\n                        </text>`;\n","import { BlobConfig } from './blober';\n\nclass LocalStorageController<T> {\n  protected storage = localStorage;\n\n  protected entities: Set<T> = new Set();\n\n  protected metakey: string;\n\n  constructor(metakey: string) {\n    this.metakey = metakey;\n    const current = JSON.parse(this.storage.getItem(this.metakey) || '[]');\n    this.entities = new Set(current);\n  }\n\n  protected save() {\n    this.storage.setItem(\n      this.metakey,\n      JSON.stringify(Array.from(this.entities))\n    );\n    document.dispatchEvent(new Event('update'));\n  }\n\n  clear() {\n    this.entities.clear();\n    this.storage.removeItem(this.metakey);\n    document.dispatchEvent(new Event('update'));\n  }\n\n  addEntity(key: T) {\n    this.entities.add(key);\n    this.save();\n  }\n\n  removeEntity(key: T) {\n    this.entities.delete(key);\n    this.save();\n  }\n\n  has(id: string) {\n    return Array.from(this.entities).some((entity: any) => entity.id === id);\n  }\n\n  getEntities() {\n    return Array.from(this.entities);\n  }\n\n  getEntitiesCount() {\n    return this.entities.size;\n  }\n\n  findEntity(predicate: (value: T, value2: number, set: Array<T>) => unknown) {\n    return Array.from(this.entities).find(predicate);\n  }\n\n  updateEntity(prevValue: T, newValue: T) {\n    if (this.entities.has(prevValue)) {\n      const entities = Array.from(this.entities);\n      const index = entities.findIndex((entity) => entity === prevValue);\n      entities[index] = newValue;\n      this.entities = new Set(entities);\n\n      this.save();\n    }\n  }\n\n  moveEntity(entity: T, newIndex: number) {\n    const entities = Array.from(this.entities);\n    const newEntities = entities.filter((e) => e !== entity);\n    newEntities.splice(newIndex, 0, entity);\n    this.entities = new Set(newEntities);\n    this.save();\n  }\n}\n\nexport const blobStorage = new LocalStorageController<BlobConfig>(\n  '__blobConfigs__'\n);\n","import generator from 'blobshape';\nimport { generateHexColor } from './helpers';\nimport { SVG_SIZE, DEFAULT_SCREEN, FILTER } from './constants';\nimport { blobStorage } from './localStorageController';\n\nexport type TransformationType =\n  | 'translate'\n  | 'rotate'\n  | 'scale'\n  | 'skewX'\n  | 'skewY';\n\ntype Transformation = {\n  type: TransformationType;\n  args: number[];\n};\n\nexport type BlobConfig = {\n  color: string;\n  id: string;\n  transform: Transformation;\n  filterId: string;\n  seed: number;\n};\n\nconst getPathString = (cfg: BlobConfig) => {\n  const path = generator({\n    size: SVG_SIZE,\n    growth: 1,\n    seed: cfg.seed.toString(),\n  }).path;\n  const animationPaths = [\n    generator({\n      size: SVG_SIZE,\n      growth: 1.5,\n      seed: (cfg.seed + 1).toString(),\n    }).path,\n    generator({\n      size: SVG_SIZE,\n      growth: 2,\n      seed: (cfg.seed + 2).toString(),\n    }).path,\n  ];\n  return `<g style=\"--color: ${cfg.color};\" transform=\"${cfg.transform.type}(${cfg.transform.args.join(\n    ', '\n  )})\" filter=\"url(#${cfg.filterId})\" id=\"${cfg.id}\">\n                <path d=\"${path}\" fill=\"${cfg.color}\" >\n                    <animate \n                        attributeName=\"d\" \n                        dur=\"10s\" \n                        repeatCount=\"indefinite\" \n                        keyTimes=\"0;0.33;0.67;1\" \n                        values=\"${path};${animationPaths.join(';')};${path}\" \n                    />\n                </path>\n            </g>`;\n};\n\nconst handleSVGGroup = (blobConfig: BlobConfig, blobSVGString: string) => {\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svg.innerHTML = blobSVGString;\n  const group = svg.querySelector('g') as SVGElement;\n\n  let offsetX = blobConfig.transform.args[0];\n  let offsetY = blobConfig.transform.args[1];\n  let currentX = 0;\n  let currentY = 0;\n\n  const move = (event: MouseEvent) => {\n    const x = event.clientX - offsetX;\n    const y = event.clientY - offsetY;\n    currentX = x;\n    currentY = y;\n    group.setAttribute('transform', `translate(${x} ${y})`);\n  };\n\n  group.addEventListener('mousedown', (event) => {\n    event.stopPropagation();\n    offsetX = event.clientX - offsetX;\n    offsetY = event.clientY - offsetY;\n    document.addEventListener('mousemove', move);\n    document.addEventListener('mouseup', () => {\n      document.removeEventListener('mousemove', move);\n\n      blobStorage.updateEntity(blobConfig, {\n        ...blobConfig,\n        transform: {\n          type: 'translate',\n          args: [currentX, currentY],\n        },\n      });\n    });\n  });\n\n  group.addEventListener('mouseover', () => {\n    const fieldset = document.getElementById(`blob_${blobConfig.id}`);\n    if (!fieldset) return;\n    fieldset.classList.add('blob-fieldset--hover');\n  });\n  group.addEventListener('mouseout', () => {\n    const fieldset = document.getElementById(`blob_${blobConfig.id}`);\n    if (!fieldset) return;\n    fieldset.classList.remove('blob-fieldset--hover');\n  });\n\n  return group;\n};\n\nconst generateBlob = (config: BlobConfig, svg: HTMLElement) => {\n  if (!config.color) {\n    config.color = generateHexColor();\n  }\n\n  const blob = handleSVGGroup(config, getPathString(config));\n\n  svg.insertAdjacentElement('afterbegin', blob);\n};\n\nexport const generateBlobs = (blobConfigs: BlobConfig[]) => {\n  const svg = document.querySelector('.screen') as HTMLElement;\n  if (!blobConfigs.length) {\n    svg.innerHTML = DEFAULT_SCREEN;\n    return;\n  }\n  svg.innerHTML = '';\n  svg.insertAdjacentHTML('beforeend', FILTER);\n\n  blobConfigs.forEach((config) => {\n    generateBlob(config, svg);\n  });\n};\n","import svg64 from \"svg64\";\n\nexport const handleExportSVG = () => {\n    const svg = document.querySelector(\".screen\") as SVGSVGElement;\n    const loadSVGButton = document.querySelector(\"#load-svg\") as HTMLButtonElement;\n    const copyAsTextButton = document.querySelector(\"#copy-svg\") as HTMLButtonElement;\n    const copyAsBase64Button = document.querySelector(\"#copy-svg-as-base64\") as HTMLButtonElement;\n    \n    copyAsBase64Button.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        const base64 = svg64(svgString);\n        navigator.clipboard.writeText(base64);\n    });\n\n    copyAsTextButton.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        navigator.clipboard.writeText(svgString);\n    });\n    \n    loadSVGButton.addEventListener(\"click\", () => {\n        const svgString = new XMLSerializer().serializeToString(svg);\n        const blob = new Blob([svgString], { type: \"image/svg+xml\" });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"blobs.svg\";\n        a.click();\n        URL.revokeObjectURL(url);\n    });\n};\n","import { BlobConfig } from './blober';\nimport { generateHexColor, generateTransformType, getRandomInt, getUniqueId } from './helpers';\n\nexport const generateNewBlobConfig = (): BlobConfig => {\n    const seed  = Math.floor(Math.random() * 1000_000_000);\n  return {\n    id: getUniqueId(),\n    transform: {\n      type: generateTransformType(),\n      args: [getRandomInt(-300, 300), getRandomInt(-300, 300)],\n    },\n    filterId: 'filter',\n    color: generateHexColor(),\n    seed,\n  };\n};\n\n","import { BlobConfig } from '../blober';\nimport { blobStorage } from '../localStorageController';\n\nconst removeBlob = (id: string) => {\n  const blob = blobStorage.findEntity((blob: BlobConfig) => blob.id === id);\n  if (!blob) {\n    return;\n  }\n  blobStorage.removeEntity(blob);\n};\n\nconst onFieldsetDrop = (event: DragEvent, id: string) => {\n  event.preventDefault();\n  const draggedId = event.dataTransfer?.getData('text/plain');\n  if (draggedId === id) {\n    return;\n  }\n  const draggedBlob = blobStorage.findEntity(\n    (blob: BlobConfig) => blob.id === draggedId\n  );\n  const targetBlob = blobStorage.findEntity(\n    (blob: BlobConfig) => blob.id === id\n  );\n  if (!draggedBlob || !targetBlob) {\n    return;\n  }\n  blobStorage.moveEntity(\n    draggedBlob,\n    blobStorage.getEntities().indexOf(targetBlob)\n  );\n};\n\nconst setDragNDropHandlers = (fieldset: HTMLFieldSetElement, id: string) => {\n  fieldset.addEventListener('dragstart', (event: DragEvent) => {\n    event.dataTransfer?.setData('text/plain', id);\n  });\n\n  fieldset.addEventListener('drop', (e) => onFieldsetDrop(e, id));\n\n  fieldset.addEventListener('dragover', (event) => {\n    event.preventDefault();\n  });\n};\n\nexport const getFieldset = ({ id, color, seed }: BlobConfig) => {\n  const fieldset = document.createElement('fieldset');\n  fieldset.setAttribute('id', `blob_${id}`);\n  fieldset.setAttribute('draggable', `true`);\n  fieldset.setAttribute('style', `--color: ${color};`);\n  fieldset.classList.add('blob-fieldset');\n  fieldset.innerHTML = `\n        <label>\n            <span>Color:</span>\n            <input value=\"${color}\" type=\"color\" name=\"color_${id}\" id=\"color_${id}\" />\n        </label>\n        <label>\n          <span>Seed:</span>\n          <input value=\"${seed}\" type=\"number\" name=\"seed_${id}\" id=\"seed_${id}\" />\n        </label>\n        <button type=\"button\" class=\"remove-blob\">Remove</button>\n    `;\n  const removeButton = fieldset.querySelector(\n    '.remove-blob'\n  ) as HTMLButtonElement;\n  removeButton.addEventListener('click', () => removeBlob(id));\n\n  fieldset.addEventListener('mouseover', () => {\n    const [_, id] = fieldset.id.split('_');\n    const group = document.getElementById(`${id}`);\n    if (!group) return;\n    group.classList.add('hover');\n  });\n  fieldset.addEventListener('mouseout', () => {\n    const [_, id] = fieldset.id.split('_');\n    const group = document.getElementById(`${id}`);\n    if (!group) return;\n    group.classList.remove('hover');\n  });\n  setDragNDropHandlers(fieldset, id);\n  return fieldset;\n};\n","import { BlobConfig } from '../blober';\nimport { blobStorage } from '../localStorageController';\nimport { generateNewBlobConfig } from '../configBuilder';\nimport { getFieldset } from './filedsetHandlers';\n\nconst updateBlob = (e: Event) => {\n  const target = e.target as HTMLInputElement;\n  const [type, id] = target.name.split('_');\n  const blob = blobStorage.findEntity((blob: BlobConfig) => blob.id === id);\n  if (!blob) {\n    return;\n  }\n  let updatedBlob = { ...blob };\n  if (type === 'color') {\n    updatedBlob.color = target.value;\n  } else if (type === 'seed') {\n    updatedBlob.seed = parseInt(target.value, 10);\n  }\n  blobStorage.updateEntity(blob, updatedBlob);\n};\n\nexport const formHandler = (form: HTMLFormElement) => {\n  const addBlobButton = form.querySelector('#add-blob') as HTMLButtonElement;\n\n  const updateView = (e?: Event) => {\n    e?.preventDefault();\n    const blobs = blobStorage.getEntities();\n    form.querySelectorAll('.blob-fieldset').forEach((el) => el.remove());\n    blobs.forEach((blob) => {\n      form.insertAdjacentElement('beforeend', getFieldset(blob));\n    });\n  };\n\n  addBlobButton.addEventListener('click', () => {\n    const newBlobConfig: BlobConfig = generateNewBlobConfig();\n    blobStorage.addEntity(newBlobConfig);\n  });\n\n  form.addEventListener('reset', (e) => {\n    e.preventDefault();\n    form.querySelectorAll('.blob-fieldset').forEach((el) => el.remove());\n    blobStorage.clear();\n  });\n  document.addEventListener('update', updateView);\n  form.addEventListener('change', updateBlob);\n  updateView();\n};\n","import { generateBlobs } from \"./js/blober.js\";\nimport { handleExportSVG } from \"./js/exportSVG.js\";\nimport { formHandler } from \"./js/controls/formHandler.js\";\nimport { blobStorage } from \"./js/localStorageController.js\";\n\nconst form = document.querySelector(\".controls__form\") as HTMLFormElement;\nhandleExportSVG();\n\nformHandler(form);\n\ndocument.addEventListener(\"update\", () => {\n    generateBlobs(blobStorage.getEntities());\n});\ngenerateBlobs(blobStorage.getEntities());\n"],"names":["generateHexColor","color","i","component","getRandomInt","min","max","getUniqueId","generateTransformType","SVG_SIZE","FILTER","DEFAULT_SCREEN","LocalStorageController","metakey","current","key","id","entity","predicate","prevValue","newValue","entities","index","newIndex","newEntities","e","blobStorage","getPathString","cfg","path","generator","animationPaths","handleSVGGroup","blobConfig","blobSVGString","svg","group","offsetX","offsetY","currentX","currentY","move","event","x","y","fieldset","generateBlob","config","blob","generateBlobs","blobConfigs","handleExportSVG","loadSVGButton","copyAsTextButton","svgString","base64","svg64","url","a","generateNewBlobConfig","seed","removeBlob","onFieldsetDrop","draggedId","_a","draggedBlob","targetBlob","setDragNDropHandlers","getFieldset","_","updateBlob","target","type","updatedBlob","formHandler","form","addBlobButton","updateView","blobs","el","newBlobConfig"],"mappings":"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"}