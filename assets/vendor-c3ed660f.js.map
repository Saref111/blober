{"version":3,"file":"vendor-c3ed660f.js","sources":["../../node_modules/svg64/dist/svg64.modern.js","../../node_modules/blobshape/index.js"],"sourcesContent":["const e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",r=e=>{e=e.replace(/\\r\\n/g,\"\\n\");let r=0,t=\"\";for(;r<e.length;r++){const n=e.charCodeAt(r);n<128?t+=String.fromCharCode(n):n>127&&n<2048?(t+=String.fromCharCode(n>>6|192),t+=String.fromCharCode(63&n|128)):(t+=String.fromCharCode(n>>12|224),t+=String.fromCharCode(n>>6&63|128),t+=String.fromCharCode(63&n|128))}return t},t=t=>{let n,a,o,i,h,d,C,c=0,g=\"\";for(t=r(t);c<t.length;)n=t.charCodeAt(c++),a=t.charCodeAt(c++),o=t.charCodeAt(c++),i=n>>2,h=(3&n)<<4|a>>4,d=(15&a)<<2|o>>6,C=63&o,isNaN(a)?d=C=64:isNaN(o)&&(C=64),g=g+e.charAt(i)+e.charAt(h)+e.charAt(d)+e.charAt(C);return g},n=e=>\"string\"==typeof e?\"string\":\"undefined\"!=typeof SVGElement&&e instanceof SVGElement?\"element\":void 0,a=e=>\"data:image/svg+xml;base64,\"+t(e),o=e=>a((new XMLSerializer).serializeToString(e)),i=e=>{switch(n(e)){case\"string\":return a(e);case\"element\":return o(e);default:return e}};export{o as convertElement,i as default,n as detectInputType,t as encode,a as getBase64,i as svg64,r as utf8Encode};\n//# sourceMappingURL=svg64.modern.js.map\n","const generator = ({ size = 400, growth = 6, edges = 6, seed = null } = {}) => {\n  var { destPoints, seedValue } = _createPoints(size, growth, edges, seed);\n  var path = _createSvgPath(destPoints);\n  return { path, seedValue };\n};\n\nconst _toRad = (deg) => deg * (Math.PI / 180.0);\n\nconst _divide = (count) => {\n  var deg = 360 / count;\n\n  return Array(count)\n    .fill(\"a\")\n    .map((_, i) => i * deg);\n};\n\nconst _randomDoubleGenerator = (s) => {\n  var mask = 0xffffffff;\n  var m_w = (123456789 + s) & mask;\n  var m_z = (987654321 - s) & mask;\n\n  return function () {\n    m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;\n    m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;\n\n    var result = ((m_z << 16) + (m_w & 65535)) >>> 0;\n    result /= 4294967296;\n    return result;\n  };\n};\n\nconst _magicPoint = (value, min, max) => {\n  let radius = min + value * (max - min);\n  if (radius > max) {\n    radius = radius - min;\n  } else if (radius < min) {\n    radius = radius + min;\n  }\n  return radius;\n};\n\nconst _point = (origin, radius, degree) => {\n  var x = origin + radius * Math.cos(_toRad(degree));\n  var y = origin + radius * Math.sin(_toRad(degree));\n  return [Math.round(x), Math.round(y)];\n};\n\nconst _shuffle = (array) => {\n  array.sort(() => Math.random() - 0.5);\n  return array;\n};\n\nconst _createPoints = (size, minGrowth, edgesCount, seed) => {\n  let outerRad = size / 2;\n  let innerRad = minGrowth * (outerRad / 10);\n  let center = size / 2;\n\n  let slices = _divide(edgesCount);\n  let maxRandomValue = _shuffle([99, 999, 9999, 99999, 999999])[0];\n  let id = Math.floor(Math.random() * maxRandomValue);\n  let seedValue = seed || id;\n  let randVal = _randomDoubleGenerator(seedValue);\n  let destPoints = [];\n\n  slices.forEach((degree) => {\n    let O = _magicPoint(randVal(), innerRad, outerRad);\n    let end = _point(center, O, degree);\n    destPoints.push(end);\n  });\n  return { destPoints, seedValue };\n};\n\nconst _createSvgPath = (points) => {\n  let svgPath = \"\";\n  var mid = [\n    (points[0][0] + points[1][0]) / 2,\n    (points[0][1] + points[1][1]) / 2,\n  ];\n  svgPath += \"M\" + mid[0] + \",\" + mid[1];\n\n  for (var i = 0; i < points.length; i++) {\n    var p1 = points[(i + 1) % points.length];\n    var p2 = points[(i + 2) % points.length];\n    mid = [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n    svgPath += \"Q\" + p1[0] + \",\" + p1[1] + \",\" + mid[0] + \",\" + mid[1];\n  }\n  svgPath += \"Z\";\n  return svgPath;\n};\n\nmodule.exports = generator;\n"],"names":["e","r","n","t","a","o","i","h","d","C","c","g","generator","size","growth","edges","seed","destPoints","seedValue","_createPoints","path","_createSvgPath","_toRad","deg","_divide","count","_","_randomDoubleGenerator","s","mask","m_w","m_z","result","_magicPoint","value","min","max","radius","_point","origin","degree","x","y","_shuffle","array","minGrowth","edgesCount","outerRad","innerRad","center","slices","maxRandomValue","id","randVal","O","end","points","svgPath","mid","p1","p2","blobshape"],"mappings":"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"}